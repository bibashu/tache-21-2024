  <!--   Core JS Files   -->
  <script src="/assets/js/core/jquery-3.7.1.min.js"></script>
  <script src="/assets/js/core/popper.min.js"></script>
  <script src="/assets/js/core/bootstrap.min.js"></script>

  <!-- jQuery Scrollbar -->
  <script src="/assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js"></script>

  <!-- Chart JS -->
  <script src="/assets/js/plugin/chart.js/chart.min.js"></script>

  <!-- jQuery Sparkline -->
  <script src="/assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js"></script>

  <!-- Chart Circle -->
  <script src="/assets/js/plugin/chart-circle/circles.min.js"></script>

  <!-- Datatables -->
  <script src="/assets/js/plugin/datatables/datatables.min.js"></script>

  <!-- Bootstrap Notify -->
  <script src="/assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js"></script>

  <!-- jQuery Vector Maps -->
  <script src="/assets/js/plugin/jsvectormap/jsvectormap.min.js"></script>
  <script src="/assets/js/plugin/jsvectormap/world.js"></script>

  <!-- Sweet Alert -->
  <script src="/assets/js/plugin/sweetalert/sweetalert.min.js"></script>

  <!-- Kaiadmin JS -->
  <script src="/assets/js/kaiadmin.min.js"></script>

  <!-- Kaiadmin DEMO methods, don't include it in your project! -->
  <script src="/assets/js/setting-demo.js"></script>
  <script src="/assets/js/demo.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    $("#lineChart").sparkline([102, 109, 120, 99, 110, 105, 115], {
      type: "line",
      height: "70",
      width: "100%",
      lineWidth: "2",
      lineColor: "#177dff",
      fillColor: "rgba(23, 125, 255, 0.14)",
    });

    $("#lineChart2").sparkline([99, 125, 122, 105, 110, 124, 115], {
      type: "line",
      height: "70",
      width: "100%",
      lineWidth: "2",
      lineColor: "#f3545d",
      fillColor: "rgba(243, 84, 93, .14)",
    });

    $("#lineChart3").sparkline([105, 103, 123, 100, 95, 105, 115], {
      type: "line",
      height: "70",
      width: "100%",
      lineWidth: "2",
      lineColor: "#ffa534",
      fillColor: "rgba(255, 165, 52, .14)",
    });
  </script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const alertType = urlParams.get('alert');
    const nom = urlParams.get('nom');
    if (alertType === 'success') {
      Swal.fire({
        title: 'Succès',
        text: `${nom} enregistrer avec succès!`,
        icon: 'success',
        confirmButtonText: 'OK'
      }).then(() => {
        // Supprimer le paramètre de l'URL pour éviter l'alerte lors du rafraîchissement
        urlParams.delete('alert');
    urlParams.delete('nom');

        const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
        window.history.replaceState(null, '', newUrl);
      });;
    }
  });
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const alertType = urlParams.get('modifier');
    const nom = urlParams.get('nom');
    

    if (alertType === 'success') {
      Swal.fire({
        title: 'Succès',
        text:  `${nom} enregistrer avec succès!`,
        icon: 'success',
        confirmButtonText: 'OK'
      }).then(() => {
        // Supprimer le paramètre de l'URL pour éviter l'alerte lors du rafraîchissement
        urlParams.delete('modifier');
        urlParams.delete('nom');
        const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
        window.history.replaceState(null, '', newUrl);
      });;
    }
  });
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const message = urlParams.get('message');
    const nom = urlParams.get('nom');
    
    if (message === 'archived') {
      Swal.fire({
        title: 'Archivé',
        text: `"${nom}" a été archivé avec succés!`,
        icon: 'success',
        confirmButtonText: 'OK'
      });
    } else if (message === 'unarchived') {
      Swal.fire({
        title: 'Désarchivé',
        text: `"${nom}" a été désarchivé avec succès!`,
        icon: 'success',
        confirmButtonText: 'OK'
      });
    }

    // Supprimer le paramètre de l'URL pour éviter l'alerte lors du rafraîchissement
    urlParams.delete('message');
    const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
    window.history.replaceState(null, '', newUrl);
  });
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const suppression = urlParams.get('suppression');
    const nom = urlParams.get('nom');
    if (suppression === 'success') {
      Swal.fire({
        title: 'Supprimé',
        text: `Enregistrement "${nom}" a été supprimé avec succès!`,
        icon: 'success',
        confirmButtonText: 'OK'
      });
    }

    // Supprimer le paramètre de l'URL pour éviter l'alerte lors du rafraîchissement
    urlParams.delete('suppression');
    urlParams.delete('nom');
    const newUrl = window.location.pathname + (urlParams.toString() ? '?' + urlParams.toString() : '');
    window.history.replaceState(null, '', newUrl);
  });

</script>

 
  <script>
    function addQuestion() {
      const questionsContainer = document.getElementById('questions');
      const questionIndex = questionsContainer.children.length;

      const questionHTML = `
        <div class="question">
          <h4>Question ${questionIndex + 1}</h4>
          <div class="form-group">
            <label for="questionText_${questionIndex}">Texte de la Question</label>
            <input type="text" name="questions[${questionIndex}][questionText]" id="questionText_${questionIndex}" class="form-control" required>
          </div>

          <div class="form-group">
            <label>Options de Réponse</label>
            <div class="form-group">
              <input type="text" name="questions[${questionIndex}][options][0][optionText]" class="form-control" placeholder="Option 1" required>
              <input type="radio" name="questions[${questionIndex}][correctAnswer]" value="Option 1" required> Correcte
            </div>
            <div class="form-group">
              <input type="text" name="questions[${questionIndex}][options][1][optionText]" class="form-control" placeholder="Option 2" required>
              <input type="radio" name="questions[${questionIndex}][correctAnswer]" value="Option 2" required> Correcte
            </div>
            <div class="form-group">
              <input type="text" name="questions[${questionIndex}][options][2][optionText]" class="form-control" placeholder="Option 3" required>
              <input type="radio" name="questions[${questionIndex}][correctAnswer]" value="Option 3" required> Correcte
            </div>
          </div>
        </div>
        
      `;

      questionsContainer.insertAdjacentHTML('beforeend', questionHTML);
    }

    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('addQuestionButton').addEventListener('click', addQuestion);
    });
    function removeQuestion(index) {
      const questionElement = document.getElementById(`question_${index}`);
      questionElement.remove();
    }
    document.getElementById('cancelButton').addEventListener('click', function() {
      const questionsContainer = document.getElementById('questions');
      const lastQuestion = questionsContainer.lastElementChild;
    
      if (lastQuestion) {
        lastQuestion.remove();
      }
    });
  </script>
  